import { type NextPage } from 'next';
import Head from 'next/head';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import Configuration from '../components/Configuration';
import { z } from 'zod';

const configurationSchemaValidator = z.object({
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  name: z.string(),
  description: z.string(),
  color: z.string(),
});

const configurationsSchemaValidator = z.array(configurationSchemaValidator);

type Configuration = z.infer<typeof configurationSchemaValidator>;
type Configurations = z.infer<typeof configurationsSchemaValidator>;

const Home: NextPage = () => {
  const queryClient = useQueryClient();
  const { data }: { data: Configurations | undefined } = useQuery(
    'configurations',
    () =>
      fetch('http://localhost:3001/api/configurations')
        .then((res) => res.json())
        .catch((err) => err)
  );

  if (data) {
    configurationsSchemaValidator.parse(data);
  }

  const deleteAll = useMutation({
    mutationFn: () => {
      return fetch('http://localhost:3001/api/configurations', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      })
        .then((res) => res.json())
        .catch((err) => console.log(err));
    },
    onSuccess: (data) => {
      queryClient.setQueryData(['configurations'], []);
    },
    onError: (error) => {
      console.error('error', error);
    },
  });

  const addConfig = useMutation({
    mutationFn: () => {
      return fetch('http://localhost:3001/api/configuration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: 'Newest decrisption',
          description: 'Best one ever!',
          color: 'red',
        }),
      })
        .then((res) => res.json())
        .catch((err) => console.log(err));
    },
    onSuccess: (data) => {
      queryClient.setQueryData(
        ['configurations'],
        (oldData: Configurations | undefined): Configurations => {
          if (!oldData) {
            return [data];
          }
          return [...oldData, data];
        }
      );
    },
  });

  const handlePostConfig = (e: React.SyntheticEvent) => {
    e.preventDefault();
    addConfig.mutate();
  };

  const handleDeleteAll = (e: React.SyntheticEvent) => {
    e.preventDefault();
    deleteAll.mutate();
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen flex-col items-center pt-20'>
        <h1>Hello I am the client</h1>
        {data &&
          data?.map((config, i) => <Configuration key={i} {...config} />)}

        <button onClick={handlePostConfig}>Post Configuration</button>
        {/* deleteAll button */}
        <button onClick={handleDeleteAll}>Delete All</button>
      </main>
    </>
  );
};

export default Home;
